[
    {
        "id": 1,
      "type": "common",
      "defs": [
        {
          "name": "FRAMEWORK",
          "description": "Un framework un insieme di funzionalità, librerie, metodi ed anche tecnologie di diverso tipo già pronte all'uso che possono essere utilizzate per realizzare una pagina / sito / applicazione in maniera più rapida e semplice.E' una sorta di intelaiatura su cui realizzare la nostra applicazione / sito.Una volta cominciato a lavorare su questo non si esce."
        },
        {
          "name": "LIBRERIA",
          "description": "Una libreria è un insieme di funzionalità, che non è detto che siano collegate tra di loro e che vado ad utilizzare solo al bisogno e solo quella che necessito al momento."
        },
        {
          "name": "SINGLE PAGE APPLICATION",
          "description": "Una Single Page Application (SPA) è un'applicazione che può essere usata su una singola pagina. All'interno di  applicazioni di questo tipo non esistono caricamenti successivo al primo, quello che costruisce la pagina."
        },
        {
          "name": "REATTIVITA",
          "description": "La reattività è la capacità di osservare il DOM e di aggiornarlo in tempo reale, senza eseguire caricamenti."
        },
        {
          "name": "PROXY",
          "description": "Nella programmazione web, il Proxy è un oggetto che fa da tramite ad un altro oggetto il quale verifica se l'oggetto principale subisce delle modifiche."
        },
        {
          "name": "URI",
          "description": "URI (unified resource identifier) è il nome del server che vogliamo contattare."
        },
        {
          "name": "XML",
          "description": "XML sta per eXtensible markup language ed è un linguaggio di markup con cui definiamo altri meta linguaggi per passare dei dati."
        },
        {
          "name": "JSON",
          "description": "JSON sta per JavaScript Object Notation ed utilizza la notazione ad oggetti per inviare dati"
        },
        {
          "name": "API",
          "description": "Le API (Application Programming Interface) è un insieme di operazioni afferenti alla stessa tematica che sono rese disponibili ai programmatori per essere svolte e si richiamano attravero un indirizzo web (se parliamo di programmazione web). E' un termine generico che può essere utilizzato anche in ambiti diversi dalla programmazione web."
        },
        {
          "name": "ENDPOINT",
          "description": "L'endpoint è un singolo indirizzo che fa parte di un API ed è colui che viene chiamato direttamente dal client."
        },
        {
          "name": "PACKAGE MANAGER",
          "description": "Un package manager è uno strumento che ci permette di installare script ed applicativi vari"
        },
        {
          "name": "CLI",
          "description": "CLI è l'acronimo per Command Line Interface ed è una interfaccia grafica. Molto spesso si usa per la creazione di progetti con determinate caratteristiche (es. scaffolding già pronto)"
        },
        {
          "name": "LINGUAGGIO BACKEND",
          "description": "Un linguaggio backend è un linguaggio che si trova su una macchina, detta server, esterno e che si occupa di restituire una versione interpretata di codice HTML, CSS, JS oppure dati in formato json."
        },
        {
          "name": "APPLICAZIONE MONOLITICA",
          "description": "Un'applicazione monolitica è un'applicazione che si occupa di generare una versione leggibile/interpretata di HTML, CSS, JS da inviare al browser (client) per essere visualizzata dall'utente. Una volta che il server ha interpretato la richiesta effettuata dal client, invia una versione leggibile dal browser in cui troviamo solo i linguaggi indicati prima"
        },
        {
          "name": "APPLICAZIONE NON MONOLITICA",
          "description": "Un'applicazione non monolitica è un'applicazione composta da due sotto progetti. Uno scritto interamente in HTML, CSS, JS che si occupa di mostrare dati all'utente. Per fare ciò, si occuperà di effettuare delle richieste alla seconda applicazione, scritta in un linguaggio backend. Tale applicazione ha il compito di inviare dati in formato json al client. L'insieme di indirizzi che la parte frontend dell'applicativo può chiamare sono gli endpoint di una o più API."
        },
        {
          "name": "OOP",
          "description": "La OOP (Object Oriented Programming) è un paradigma presente in diversi linguaggi (PHP, Java, Javascript, Python, C++...) e consiste nella realizzazione di modelli rappresentanti un pezzo di realtà in codice."
        },
        {
          "name": "EREDITARIETA'",
          "description": "L'ereditarietà è una caratteristica dei linguaggi ad oggetti, con la quale possiamo fare in modo che una classe, detta figlia, erediti le proprietà ed i metodi di un altra, detta genitore."
        },
        {
          "name": "COMPOSIZIONE/INCAPSULAMENTO",
          "description": "La composizione (o incapsulamento) è la caratteristica attraverso la quale all'interno di una classe possiamo definire una proprietà che abbia come valore un'istanza di un'altra classe."
        },
        {
          "name": "POLIMORFISMO",
          "description": "Il polimorfismo nei linguaggi ad oggetti è la possibilità di sovrascrivere uno o più metodi della classe genitore all'interno della classe figlio. Quando tramite un'istanza della classe figlio, richiamiamo il metodo in questione, verrà eseguito quello del figlio ovviamente, quindi quello che ha sovrascritto quello del padre."
        },
        {
          "name": "Design Pattern",
          "description": "Un design pattern è un insieme di linee guida da applicare per lo sviluppo di un software."
        },
        {
          "name":"MVC",
          "description": "MVC sta per Model View Controller ed è il design pattern di Laravel (e molti altri framework). <br><br> <ul><li>Il <strong>Model</strong> è la rappresentazione di un aspetto della realtà. E' una classe fondamentalmente. Rappresenta inoltre le tabelle presenti nel database.</li><li>La <strong>View</strong> è la parte che viene vista dall'utente finale e permette l'interazione tra lui e la nostra applicazione permettendogli di svolgere operazioni come ad esempio inserire un nuovo record nel db, cancellarlo, modificarlo, visualizzarlo, leggere i post di un blog, comprare qualcosa ecc.</li><li>Il <strong>controller</strong> è il \"cervello\" dell'applicazione. Può essere visto come un ponte che collega il model alla view e mette in relazione queste due componenti. Si occupa, in sostanza della logica di business dell'applicazione</li></ul>"
        },
        {
          "name": "COMPOSER",
          "description": "Il composer è un gestore di dipendenze che permette di installare pacchetti/librerie che permettono alla nostra applicazione di funzionare."
        },
        {
          "name": "ORM",
          "description": "Un ORM (Object, Relationship Mapping) è un'interfaccia intermedia tra database e codice che si occupa della connesione, e del recupero e persistenza dei dati in un database."
        },
        {
          "name": "CRUD",
          "description": "CRUD è l'acronimo di <strong>C</strong>reate, <strong>R</strong>ead, <strong>U</strong>pdate, <strong>D</strong>elete. Queste operazioni sono le operazioni fondamentali, base, elementari che si possono effettuare sui dati."
        },
        {
          "name": "REST",
          "description": "<strong>RE</strong>presentional <strong>S</strong>tate <strong>T</strong>ransfer: è un'archiettura chiara e precisa che permette lo scambio/utilizzo di risorse. Le risorse sono infomrazioni a cui si può accedere attraverso un URI. Client e Server comunicano attraverso il protocollo HTTP (HTTPS) per scambiarsi <span class='text-decoration-underline'>rappresentazioni</span> di queste risorse. L'URL della richiesta deve essere ben definita ed univoca, inoltre devono essere utilizzati dei metodi HTTP per azioni specifiche sulle risorse. Questi metodi sono: <br><br> <ul class='list-unstyled m-0'><li><strong>GET</strong>: recupero dati (lettura)</li><li><strong>POST</strong>: aggiunta dati (scrittura)</li><li><strong>UPDATE/PATCH</strong>:Modifica dati (scrittura)</li><li><strong>DELETE</strong>: cancellazione</li></ul>"
        }
      ]
    },
    {
        "id": 2,
      "type": "git",
      "defs": [
        {
          "name": "GIT",
          "description": "Sistema di versionamento che ci permette di tenere traccia di tutte le modifiche che avvengono all'interno di un progetto, permettendo di avere più versioni dello stesso."
        },
        {
          "name": "REPOSITORY",
          "description": "Insieme dei file e delle cartelle e della loro storia che compongono il progetto che vogliamo tracciare con git"
        },
        {
          "name": "STAGING",
          "description": "Inserire i file che abbiamo modificato in un'area temporanea"
        },
        {
          "name": "COMMIT",
          "description": "Creare uno stato recuperabile del progetto."
        },
        {
          "name": "PUSH",
          "description": "Operazione di upload dello / degli stato / i del progetto creato / i attraverso i commit."
        },
        {
          "name": "REVERT",
          "description": "Tornare ad uno stato precedente del progetto, senza cancellare la storia passata."
        },
        {
          "name": "RESET",
          "description": "Ritorno ad un commit precedente alterando la storia passata.Se si fa l'hard reset si cancella la storia, se si fa il reset semplice le modifiche dei commit successivi a quello in cui si vuole tornare vengono messe in area di staging."
        },
        {
          "name": "BRANCH",
          "description": "Un branch è un ramo che parte da quello principale e nel quale andiamo a sviluppare una funzionalità specifica oppure ristrutturare/modificare una già esistente. E' una linea indipendente di sviluppo. E' possibile navigare sempre tra un branch e l'altro."
        },
        {
          "name": "MERGE",
          "description": "Operazione con la quale andiamo a fondere un ramo di sviluppo, in quello principale."
        }
      ]
    },
    {
        "id": 3,
      "type": "html",
      "defs": [
        {
          "name": "HTML",
          "description": "L'html è un linguaggio di Markup (Hypertext Markup Language) che si occupa della visualizzazione delle pagine e non contiene logica. NON è un linguaggio di programmazione."
        },
        {
          "name": "DOM",
          "description": "Document Object Model forma di rappresentazione informatica dei documenti strutturati come modello orientato agli oggetti o ad albero. Si può definire anche come la struttura in cui è organizzata una pagina web."
        },
        {
          "name": "BLOCK LEVEL TAGS",
          "description": "Tag che occupano tutta la riga della pagina costringendo l'elemento successivo a posizionarsi in una nuova linea."
        },
        {
          "name": "INLINE TAGS",
          "description": "Tag che occupano solo lo spazio del loro contenuto. Gli elementi successivi, SE INLINE, si posizioneranno di fianco."
        },
        {
          "name": "SELF CLOSING TAG",
          "description": "Tag che non prevedono contenuto, non hanno un tag di chiusura;"
        },
        {
          "name": "ENTITIES",
          "description": "Codice HTML per rappresentare caratteri speciali, come ad esempio lettere accentate, simboli di valuta e altri simboli generici"
        },
        {
          "name": "PATH ASSOLUTI",
          "description": "Partono dall'inizio, tipicamente C o comunque la posizione iniziale dell'hard disk per arrivare dove è l'immagine."
        },
        {
          "name": "PATH RELATIVI",
          "description": "Partono da dove ci troviamo per andare dove si trova l'immagine."
        }
      ]
    },
    {
        "id": 4,
      "type": "css",
      "defs": [
        {
          "name": "CSS",
          "description": "CSS (Cascade StyleSheet) Sono degli insiemi di regole che servono per personalizzare le nostre pagine."
        },
        {
          "name": "SELETTORE",
          "description": "E' un modo per indicare un elemento dell'html a cui applciare delle regole di stile."
        },
        {
          "name": "ID",
          "description": "Identificatore univoco da utilizzare all'interno di un documento una volta sola. A questo id possiamo applicare delle regole di stile"
        },
        {
          "name": "CLASSE",
          "description": "E' un selettore che definiamo una volta sola all'interno del file css, ma possiamo utilizzare tutte le volte che vogliamo all'interno dell'html"
        },
        {
          "name": "PADDING",
          "description": "Il padding è la distanza tra il contenuto ed il bordo interno del suo contenitore"
        },
        {
          "name": "MARGIN",
          "description": "Il margine è la distanza tra i bordi esterni di due elementi adiacenti"
        },
        {
          "name": "FLEXBOX",
          "description": "E' una modalità di layout con la quale possiamo posizionare degli elementi all'interno di un contenitore o più in generale della pagina in maniera flessibile in modo semplice."
        },
        {
          "name": "CONTENITORE",
          "description": "Elemento di layout che si occupa di determinare dove deve essere posizionato il contenuto della pagina."
        },
        {
          "name": "RIGA",
          "description": "Elemento di layout che si occupa del posizionamento delle colonne al suo interno. Deve essere sempre contenuta in un contenitore.O al limite in una colonna."
        },
        {
          "name": "COLONNA",
          "description": "La colonna è l'elemento di layout risultante dalla suddivisione verticale dello spazio interno della riga.E' l'elemento in cui poi andremo a mettere il contenuto. Deve essere contenuta esclusivamente in una riga."
        },
        {
          "name": "MODULO",
          "description": "E' il risultato della suddivisione orizzontale dello spazio della colonna. Sono le righe tra l'altro, in cui andremo a mettere il contenuto testuale e le immagini, pulsanti, link."
        },
        {
          "name": "GUTTER",
          "description": "Spazio che separa due colonne in un layout. Può essere impostato tramite margini sulle colonne oppure attraverso la proprietà gap"
        },
        {
          "name": "ADATTABILITA'",
          "description": "L'adattabilità è la capacità di una pagina web di adattare le dimensioni delle componenti / parti che la compongono alle diverse tipologie di schermo.Ciò comporta un restringimento o più in generale ridimensionamento delle stesse senza intervenire sulla loro posizione."
        },
        {
          "name": "RESPONSIVITA'",
          "description": "La responsività è la capacità di una pagina web di adattare il proprio contenuto in dimensioni ed posizione ai diversi device."
        },
        {
          "name": "MEDIA QUERY",
          "description": "Una media query è un insieme di regole che definiscono il comportamento delle componenti(tutte o alcune) di una pagina quando raggiungono determinate risoluzioni.Tali risoluzioni vengono anche chiamate breakpoint."
        },
        {
          "name": "MOBILE FIRST",
          "description": "E' una modalità di progettazione delle pagine web in cui si da priorità allo sviluppo per i dispositivi mobile(smartphone).In questa modalità tutto ciò che si trova fuori da media query viene applicato subito(va da risoluzione 0px a quella della prima media query).Sviluppo le pagine partendo dalle risoluzioni mobile e andando a realizzare le media query che determinano il comportamento delle componenti a risoluzioni più grandi fino a quella desktop maggiore.Utilizziamo in questo caso < strong > min - width</strong > nei breakpoint."
        },
        {
          "name": "DESKTOP FIRST",
          "description": "E' una modalità di progettazione delle pagine web in cui si da priorità allo sviluppo desktop.In questa modalità tutto ciò che si trova fuori da media query viene applicato alla risoluzione più grande, quindi oltre al breakpoint più grande impostato nelle media query.Sviluppo le pagine partendo dalle risoluzioni desktop per poi andare a determinare il comportamento delle componenti a risoluzioni più basse, fino ad arrivare a quelle smartphone.Utilizziamo in questo caso <strong> max-width</strong> nei breakpoint."
        }
      ]
    },
    {
        "id": 5,
      "type": "javascript",
      "defs": [
        {
          "name": "LINGUAGGIO DI PROGRAMMAZIONE",
          "description": "Un linguaggio di programmazione è un linguaggio formale (cioè costituito da simboli e che rispetta delle regole sintattiche, grammaticali e semantiche) in cui scriviamo istruzioni di input(entrata) per restituire qualcosa in output(uscita)"
        },
        {
          "name": "LINGUAGGIO COMPILATO",
          "description": "Un linguaggio compilato è una tipologia di codice che deve essere passata prima da un programma, detto appunto compilatore, che traduce il codice scritto in un linguaggio comprensibile per la macchina e pertanto ne genererà un file eseguibile per il sistema operativo."
        },
        {
          "name": "LINGUAGGIO INTERPRETATI",
          "description": "Un linguaggio interpretato è un linguaggio che viene direttamente eseguito da un programma chiamato interprete, che ne esegue appunto le istruzioni."
        },
        {
          "name": "ALGORITMO",
          "description": "L'algoritmo è una sequenza di istruzioni da eseguire in un ordine logico, volta a risolvere un problema."
        },
        {
          "name": "DIAGRAMMA DI FLUSSO",
          "description": "Un diagramma di flusso è una rappresentazione grafica delle operazioni che si devono eseguire per eseguire un certo algoritmo.Il diagramma di flusso è un linguaggio formale che deve rispettare determinate regole."
        },
        {
          "name": "CLASSE",
          "description": "Definizione 1: E' un modello programmativo/informatico che rappresenta un concetto reale. (es. Auto, Gatto, Immobile, Biscotto...). Definizione 2: E' la rappresentazione di un concetto reale in formato codice. Definizione 3: E' un modello che rappresenta un pezzo di realtà."
        },
        {
          "name": "OGGETTO / ISTANZA",
          "description": "Definizione 1: L'oggeto o istanza è un elemento che nasce da una classe e pertanto avrà le stesse proprietà ed operazioni date dalla classe.A questi possiamo assegnare dei valori. Definizione 2: L'istanza/oggetto di una classe è la concretizzazione della classe."
        },
        {
          "name": "OPERATORE DI ASSEGNAZIONE <strong>=</strong>",
          "description": "L'operatore di assegnazione è quell'operatore che mi permette di assegnare dei valori."
        },
        {
          "name": "VARIABILE",
          "description": "Una variabile è un contenitore in cui viene salvata una, ed una sola, informazione durante l'esecuzione del programma. Tale informazione rimarrà nella variabile finchè il programma rimane in esecuzione."
        },
        {
          "name": "DICHIARAZIONE DI UNA VARIABILE",
          "description": "La dichiarazione di una variabile avviene quando all'interno del nostro codice scrivamo una parola chiave tra <strong>const</strong>, <strong>let</strong> e <strong>var</strong> seguita dal nome che abbiamo scelto per la variabile <br> <br>"
        },
        {
          "name": "INIZIALIZZAZIONE DI UNA VARIABILE",
          "description": "L'inizializzazione di una variabile è l'assegnazione del primo valore della variabile.Molto spesso si fa assieme alla dichiarazione della variabile.In caso di variabile <strong>const</strong> queste due operazioni devono essere fatte assieme"
        },
        {
          "name": "HOISTING",
          "description": "L'hoisting è la capacità di Javascript di leggere le variabile presenti all'interno del documento e consentirne l'uso anche prima della dichiarazione <br>"
        },
        {
          "name": "STRINGA",
          "description": "Il tipo di dato Stringa è un insieme di caratteri.Possono essere inclusi caratteri minuscoli, maiuscoli caratteri speciali e numeri."
        },
        {
          "name": "CONCATENAZIONE TRA STRINGHE",
          "description": "La concatenazione tra stringhe è un'operazione tra stringhe che prevede l'unione di due o più stringhe in un'unica stringa."
        },
        {
          "name": "SCOPE DI UNA VARIABILE",
          "description": "Contesto nel quale si può richiamare una determinata variabile."
        },
        {
          "name": "ITERAZIONE(o ciclata)",
          "description": "L'iterazione (o ciclata) è il singolo insieme di operazioni che vengono svolte durante l'esecuzione di un ciclo for. Terminato questo insieme di operazioni, il for fa eseguire questo insieme di operazione nuovamente da capo, facendo così partire una nuova iterazione."
        },
        {
          "name": "ARRAY(Vettore)",
          "description": "Un array è una struttura dati che permette di contenere più valori contemporaneamente al suo interno in posizione l'uno adiacente all'altro."
        },
        {
          "name": "INDICE DI UN ARRAY",
          "description": "L'indice di un array è il valore che rappresenta la posizione di un elemento all'interno dell'array. Gli indici partono sempre da 0 ed arrivano al valore N - 1 (dove N è la lunghezza - numero di elementi lo compongono - dell'array)"
        },
        {
          "name": "FUNZIONI",
          "description": "Le funzioni sono porzioni di codice che svolgono una precisa attività/compito all'interno del programma. Servono per evitare ripetizione del codice, migliorare la manutenibilità dello stesso ed isolare una certa porzione di codice al fine di migliorare la leggibilità dello stesso."
        },
        {
          "name": "DICHIARAZIONE/DEFINIZIONE DI UNA FUNZIONE",
          "description": "Scrivo la funzione e quello che fa nel codice, in un certo senso avvertendo il programma che esiste questa funzione."
        },
        {
          "name": "CHIAMATA DI UNA FUNZIONE",
          "description": "Eseguo la funzione scrivendo all'interno del codice, dove deve essere eseguita, il nome della stessa seguito dalle parentesi ed eventuali parametri."
        },
        {
          "name": "PARAMETRO DI UNA FUNZIONE",
          "description": "Il parametro di una funzione è una variabile il cui valore è dato all'invocazione/chiamata della funzione. Il parametro prende il nome di generale o formale quando siamo nella definizione/dichiarazione della funzione. Prende invece il nome di attuale o effettivo quando siamo nell'invocazione/chiamata di una funzione."
        },
        {
          "name": "FUNZIONI ANONIME",
          "description": " Funzioni che non hanno un nome. Pertanto, non possono essere richiamate all'interno del codice dove vogliamo ma devono essere eseguite nell'ambito di un particolare evento. Essendo legate a degli eventi, queste funzioni, sono tendenzialmente uniche. Vengono chiamate anche Funzioni di callback. Non avendo un nome, non possono stare al di fuori di eventi."
        },
        {
          "name": "THIS",
          "description": "parola chiave che sta ad indicare il contesto in cui ci troviamo. E' un oggetto. Se clicchiamo un pulsante, il contesto è quello del pulsante. Infatti facendo il console.log di this all'interno della funzione di callback dell'evento click vedremo il pulsante che abbiamo cliccato."
        },
        {
          "name": "PROGRAMMAZIONE SINCRONA",
          "description": "La programmazione sincrona prevede l'esecuzione di tutti i passaggi uno dopo l'altro in maniera consecutiva"
        },
        {
          "name": "PROGRAMMAZIONE ASINCRONA",
          "description": "Un tipo programmazione in cui parte del codice prosegue parallelamente a quello principale."
        },
        {
          "name": "PROPRIETA' DI UN OGGETTO",
          "description": " La proprietà di un oggetto è una coppia chiave valore in cui la chiave rappresenta il nome della proprietà, il valore invece il suo valore."
        },
        {
          "name": "DESTRUTTURAZIONE",
          "description": "Prendere tutte o solo alcune delle proprietà e dei loro valori di un oggetto per inserirle in delle variabili. Serve quando dobbiamo mostrare o utilizzare i valori di tutte o alcune delle proprietà dell'oggetto (senza cancellarlo) in maniera semplice ed immediata"
        },
        {
          "name": "AJAX",
          "description": "Ajax è l'acronimo per Asinchronous Javascript and XML ed è una tecnologia che permette di effettuare chiamate http <strong>asincrone</strong> con javascript."
        },
        {
          "name": "DATA ATTRIBUTE",
          "description": "Un data attribute è un attributo personalizzato che deve avere la seguente sintassi: data-nome_attributo. Dopo data- quindi va messo il nome dell'attributo in minuscolo e con gli spazi sostituiti dall'underscore (_). Non sono ammessi numeri e caratteri speciali. I data attribute si utilizzano per personalizzare modali, inviare informazioni in generale."
        }
      ]
    },
    {
        "id": 6,
      "type": "vuejs",
      "defs": [
        {
          "name": "VUEJS",
          "description": "Vuejs è un framework frontend per la realizzazione di SPA (Single Page Application)."
        },
        {
          "name": "DIRETTIVE",
          "description": "Sono degli attributi particolari definiti in vuejs che ci permettono di interagire con il DOM.",
          "appendix": [
            {
              "name": "v-model",
              "description": "Il v-model è la direttiva che ci permette di catturare il valore di un campo input o select ecc per poi utilizzarlo in un secondo momento per svolgere delle operazioni"
            },
            {
              "name": "v-bind",
              "description": "Il v-bind è una direttiva che consente di collegare il valore contenuto in una variabile del data di vuejs con gli attributi standard (class, alt, img, href ecc) dei tag html, permettendo quindi di cambiare valore in base alle scelte dell'utente per esempio"
            },
            {
              "name": "v-on",
              "description": "V-on è la direttiva che ci permette di associare eventi (click, change, ecc) ad operazioni da svolgere o funzioni"
            },
            {
              "name": "v-if",
              "description": "v-if è la direttiva che ci permette di mostrare o meno un div se la sua condizione è vera. Da notare che se la condizione risulta falsa, il div non esisterà proprio all'interno del documento"
            },
            {
              "name": "v-show",
              "description": "v-if è la direttiva che ci permette di mostrare o meno un div se la sua condizione è vera. A differenza del v-if, il div esiste all'interno del documento anche se la condizione risulta falsa e avrà impostata la proprietà display: none"
            }
          ]
        },
        {
            "name": "PROPS",
            "description": "Una prop è un modo/uno strumento che permette di inviare dati da una componente padre alla componente figlio."
          },
          {
            "name": "STATE MANAGEMENT",
            "description": "Lo State Management è uno strumento nel quale andiamo a mettere le informazioni che devono essere utilizzabili da più componenti onde evitare la bad practice del prop drilling."
          },
          {
            "name": "EMIT",
            "description": "L'emit è uno strumento/un modo che permette di inviare dati da una componente figlio alla propria componente genitore.",
            "appendix": [
              {
                "name": "Lanciare emit direttamente da input",
                "description": "Non dobbiamo lavorare sui dati prima di lanciare l'evento"
              },
              {
                "name": "Lanciare emit da metodo",
                "description": "Dobbiamo lavorare sui dati prima di lanciare l'evento"
              }
            ]
          },
          {
            "name": "COMPUTED PROPERTIES",
            "description": "Le computed properties sono delle funzioni che però: <br><br> <ul><li>Si utilizzano come se fossero delle variabili infatti è obbligatorio mettere il return al loro interno.</li><li>Si attivano da sole se, una variabili utilizzata al suo interno, subisce dei cambiamenti.</li>"
          }
      ]
    },
    {
        "id": 7,
      "type": "Vite",
      "defs": [
        {
          "name": "NODE.js",
          "description": "Node.js è un ambiente di sviluppo open source, cross platform e runtime, sviluppato in javascript e basato sul motore V8 di Chrome"
        },
        {
          "name": "Vite",
          "description": "Vite è un tool per la creazione rapida di progetti basati su Vue oppure su altri framework o librerie."
        },
        {
          "name": "NPM",
          "description": "NPM (Node Package Manager) è il gestore di pacchetti per Node.js. Ci permette di installare librerie e funzionalità varie",
          "appendix": [
            {
              "name": "npm init",
              "description": "Inizializza un progetto creando il file package.json. Se è già presente, non serve lanciarlo."
            },
            {
              "name": "npm install",
              "description": "Serve ad installare i pacchetti presenti nel file package.json. In questo modo crea la cartella node_modules all'interno del progetto. Questa cartella conterrà le sottocartelle dei pacchetti installati."
            }
          ]
        },
        {
          "name": "SASS",
          "description": "Sass (Syntattically Awesome StyleSheet) è un preprocessore CSS che ci permette di semplificare e migliorare la leggibilità del codice css aggiungendo regole sintattiche allo scopo."
        }
      ]
    },
    {
      "type": "PHP",
      "defs": [
        {
          "name": "PHP",
          "description": "PHP sta per Personal Home Page ed è un linguaggio di programmazione backend tra i più usati nello sviluppo web."
        },
        {
          "name": "MYSQLI",
          "description": "mysqli è un'estensione di php che ci permette di interfacciare MySQL con php e quindi di leggere/scrivere dati da/in un database. Essendo un'estensione di php, potrebbe non essere installata da subito. In tal caso, bisogna provvedere ad installarla."
        }
      ]
    },
    {
      "type": "DATABASE",
      "defs": [
        {
          "name": "DATABASE",
          "description": "I database sono delle tecnologie che permettono la persistenza di dati. Questi insiemi di dati, detti collezioni, saranno salvati in maniera coerente tra di loro in determinate strutture."
        },
        {
          "name": "(R)DBMS",
          "description": "I (R)DBMS sono i mezzi tecnologici attraverso i quali possiamo gestire le collezioni di dati"
        },
        {
          "name": "TRANSAZIONI",
          "description": "Le transazioni sono un insieme di operazioni che al loro termine, se tali operazioni vanno a buon fine, devono portare ad una variazione dei/sui dati. Se una sola di queste operazioni non va a buon fine, i dati non devono subire variazioni. Tali transazioni devono essere eseguite in un ordine logico."
        },
        {
          "name": "PRIMARY KEY",
          "description": "La primary key è l'identificatore primario della riga all'interno della tabella. E' un valore numerico univoco all'interno della tabella stessa"
        },
        {
          "name": "INDICI",
          "description": "Gli indici sono strutture dati che il DBMS utilizza per velocizzare le ricerche all'interno del database. Più colonne contemporaneamente possono essere degli indici. Una chiave primaria è SEMPRE un indice."
        },
        {
          "name": "DIAGRAMMA ER",
          "description": "Il diagramma ER (Entity Relationship) è una rappresentazione grafica della struttura dei database"
        },
        {
          "name": "SQL",
          "description": "SQL è un linguaggio che serve per interagire con i RDBMS ed offre diverse funzioni, tra cui la scrittura, la lettura, la modifica e la cancellazione di database, tabelle e righe di tabelle."
        },
        {
          "name": "HARD DELETE",
          "description": "L'hard delete è la cancellazione effettiva del record all'interno del database. <strong>Tale operazione è irreversibile.</strong> poichè una volta cancellato il record non si può più recuperare."
        },
        {
          "name": "SOFT DELETE",
          "description": "La soft delete è una cancellazione finta poichè il record rimane nel database, ma tutte le tipologie di utenti al di fuori degli amminsitratori del sistema, non possono vederla. L'amministratore del sistema deve comunque poter cancellare definitivamente il record, quindi avrà uno strumento apposito. Spesso vengono visualizzati questi record disabilitati alla visualizzazione ospite in una tabella a parte."
        },
        {
          "name": "FUNZIONI DI HASHING",
          "description": "Le funzioni di hashing sono delle funzioni non invertibili che trasformano una stringa di lunghezza arbitraria (variabile) in una stringa di lunghezza prefissata. Una volta trasformata la stringa, non si può tornare indietro."
        },
        {
          "name": "MIDDLEWARE",
          "description": "Un middleware è una componente che si occupa di filtrare tutte le richieste HTTP provenienti dal client."
        }
      ]
    },
    {
      "type": "LARAVEL",
      "defs" : [
        {
          "name": "MIGRATIONS",
          "description": "Le migrations sono dei file che permettono di alterare la struttura del database creando nuove tabelle oppure modificando o cancellando quelle già esistenti."
        },
        {
          "name": "SEEDER",
          "description": "Strumento attraverso il quale possiamo popolare il database in maniera casuale attraverso la classe FakerPHP oppure in maniera reale (cioè con dati reali) leggendoli/recuperandoli da un altro file."
        }
      ]
    }
  ]